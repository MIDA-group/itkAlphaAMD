
#include <stdio.h>
#include <string.h>
#include <string>

//#include "itkLBFGSOptimizer.h"
#include "itkImageFileWriter.h"
#include "itkResampleImageFilter.h"
#include "itkCastImageFilter.h"
#include "itkSquaredDifferenceImageFilter.h"

#include "itkImageRegistrationMethod.h"
#include "itkMeanSquaresImageToImageMetric.h"
#include "itkTimeProbesCollectorBase.h"
#include "itkSpatialObjectToImageFilter.h"
#include "itkEllipseSpatialObject.h"

#include "common/itkImageProcessingTools.h"
#include "itkTextOutput.h"

#include "itkTimeProbesCollectorBase.h"
#include "itkMemoryProbesCollectorBase.h"

#include "metric/itkAlphaSMDMetricDeform.h"

// For BSpline transform resampling
#include "itkBSplineResampleImageFunction.h"
#include "itkIdentityTransform.h"
#include "itkBSplineDecompositionImageFilter.h"

#include "itkCheckerBoardImageFilter.h"
#include "itkTransformToDisplacementFieldFilter.h"
#include "itkFlatStructuringElement.h"
#include "itkBinaryDilateImageFilter.h"

constexpr unsigned int ImageDimension = 3U;
typedef double PixelType;
typedef double CoordinateRepType;

typedef itk::Image<PixelType, ImageDimension> ImageType;
typedef typename ImageType::Pointer ImagePointer;

typedef itk::Vector<PixelType, ImageDimension> VectorPixelType;
typedef itk::Image<VectorPixelType, ImageDimension> DisplacementFieldImageType;
typedef DisplacementFieldImageType::Pointer DisplacementFieldImagePointer;

typedef itk::IPT<double, ImageDimension> IPT;

template <typename TransformType>
DisplacementFieldImagePointer TransformToDisplacementField(typename TransformType::Pointer transform, ImagePointer reference_image) {
  typedef itk::TransformToDisplacementFieldFilter<DisplacementFieldImageType, CoordinateRepType> DisplacementFieldGeneratorType;

  typename DisplacementFieldGeneratorType::Pointer dfield_gen = DisplacementFieldGeneratorType::New();

  dfield_gen->UseReferenceImageOn();
  dfield_gen->SetReferenceImage(reference_image);
  dfield_gen->SetTransform(transform);
  try {
    dfield_gen->Update();
  } catch (itk::ExceptionObject & err) {
    std::cerr << "Error while generating deformation field: " << err << std::endl;
  }

  return dfield_gen->GetOutput();
}

#include "itkDisplacementFieldJacobianDeterminantFilter.h"

ImagePointer JacobianDeterminantFilter(DisplacementFieldImagePointer dfield) {
  typedef itk::DisplacementFieldJacobianDeterminantFilter<DisplacementFieldImageType, PixelType, ImageType> FilterType;
  FilterType::Pointer filter = FilterType::New();

  filter->SetInput(dfield);
  filter->SetUseImageSpacingOn();

  filter->Update();

  return filter->GetOutput();
}

DisplacementFieldImagePointer LoadDisplacementField(std::string path) {
  typedef itk::ImageFileReader<DisplacementFieldImageType> FieldReaderType;
  FieldReaderType::Pointer reader = FieldReaderType::New();

  reader->SetFileName(path.c_str());

  reader->Update();

  return reader->GetOutput();
}

void SaveDisplacementField(DisplacementFieldImagePointer image, std::string path) {
  typedef itk::ImageFileWriter<DisplacementFieldImageType> FieldWriterType;
  FieldWriterType::Pointer writer = FieldWriterType::New();

  writer->SetInput(image);

  writer->SetFileName(path.c_str());

  try {
    writer->Update();
  } catch (itk::ExceptionObject & err) {
    std::cerr << "Error while writing displacement field: " << err << std::endl;
  }
}

void SaveJacobianDeterminantImage(ImagePointer image, std::string path) {
  typedef itk::ImageFileWriter<ImageType> FieldWriterType;
  FieldWriterType::Pointer writer = FieldWriterType::New();

  writer->SetInput(image);

  writer->SetFileName(path.c_str());

  try {
    writer->Update();
  } catch (itk::ExceptionObject & err) {
    std::cerr << "Error while writing jacobian determinant: " << err << std::endl;
  }
}

static void CreateEllipseImage(ImageType::Pointer image);
static void CreateCircleImage(ImageType::Pointer image);

constexpr unsigned int splineOrder = 3;

typedef itk::BSplineTransform<double, ImageDimension, splineOrder> TransformType;
typedef typename TransformType::Pointer TransformPointer;

typedef itk::AlphaSMDObjectToObjectMetricDeformv4<ImageType, ImageDimension, double, splineOrder> MetricType;
typedef typename MetricType::Pointer MetricPointer;


#include "itkGradientMagnitudeImageFilter.h"

ImagePointer GradientMagnitudeImage(ImagePointer image, double sigma) {
    typedef itk::IPT<double, ImageDimension> IPT;
    if(sigma > 0.0) {
        image = IPT::SmoothImage(image, sigma);
    }
    typedef itk::GradientMagnitudeImageFilter<ImageType, ImageType> GradientMagnitudeFilterType;
    typename GradientMagnitudeFilterType::Pointer gmFilter = GradientMagnitudeFilterType::New();

    gmFilter->SetInput(image);
    gmFilter->SetUseImageSpacingOn();
    gmFilter->Update();

    return gmFilter->GetOutput();
}

typename IPT::BinaryImagePointer DilateMask(typename IPT::BinaryImagePointer mask, int radiusValue) {
    using StructuringElementType = itk::FlatStructuringElement< ImageDimension >;
    StructuringElementType::RadiusType radius;
    radius.Fill( radiusValue );
    StructuringElementType structuringElement = StructuringElementType::Ball( radius );

    using BinaryDilateImageFilterType = itk::BinaryDilateImageFilter<IPT::BinaryImageType, IPT::BinaryImageType, StructuringElementType>;
    BinaryDilateImageFilterType::Pointer dilateFilter = BinaryDilateImageFilterType::New();
    dilateFilter->SetInput(mask);
    dilateFilter->SetKernel(structuringElement);

    dilateFilter->Update();
    return dilateFilter->GetOutput();
}

ImagePointer Chessboard(ImagePointer image1, ImagePointer image2, int cells)
{
    itk::FixedArray<unsigned int, ImageDimension> pattern;
    pattern.Fill(cells);

    typedef itk::IPT<double, ImageDimension> IPT;
    typedef itk::CheckerBoardImageFilter<ImageType> CheckerBoardFilterType;
    CheckerBoardFilterType::Pointer checkerBoardFilter = CheckerBoardFilterType::New();
    checkerBoardFilter->SetInput1(image1);
    checkerBoardFilter->SetInput2(image2);
    checkerBoardFilter->SetCheckerPattern(pattern);
    checkerBoardFilter->Update();
    return checkerBoardFilter->GetOutput();
}

ImagePointer BlackAndWhiteChessboard(ImagePointer refImage, int cells)
{
    typedef itk::IPT<double, ImageDimension> IPT;
    return Chessboard(IPT::ZeroImage(refImage->GetLargestPossibleRegion().GetSize()), IPT::ConstantImage(1.0, refImage->GetLargestPossibleRegion().GetSize()), cells);
}

#include <fstream>
#include <sstream>
#include <string>
#include "itkRawImageIO.h"
#include "itkImageFileReader.h"

std::vector<std::string> read_strings(std::string path)
{
    std::vector<std::string> result;
    std::ifstream infile(path.c_str());

    std::string line;
    while (std::getline(infile, line))
    {
        result.push_back(line);
    }

    return result;
}

template <typename TPixelType, unsigned int TImageDimension>
ImagePointer readRawIntegerFile(std::string path)
{
    std::vector<std::string> hdr = read_strings(path);

    assert(hdr.size() >= 1 + TImageDimension * 2);

    std::string data_path = hdr[0];
    int nPixels[TImageDimension];
    double szVoxels[TImageDimension];

    for (int i = 0; i < TImageDimension; ++i)
    {
        nPixels[i] = atoi(hdr[1 + i].c_str());
        szVoxels[i] = atof(hdr[1 + TImageDimension + i].c_str());
    }

    typedef itk::RawImageIO<TPixelType, TImageDimension> IOType;
    typedef typename IOType::Pointer IOPointer;

    IOPointer io = IOType::New();

    for (int i = 0; i < TImageDimension; ++i)
    {
        io->SetDimensions(i, nPixels[i]);
        io->SetSpacing(i, szVoxels[i]);
    }

    io->SetHeaderSize(io->GetImageSizeInPixels() * 0);

    typedef itk::Image<TPixelType, TImageDimension> IntermediateImageType;

    typedef itk::ImageFileReader<IntermediateImageType> ReaderType;

    typedef itk::IPT<double, ImageDimension> IPT;

    typename ReaderType::Pointer reader = ReaderType::New();

    reader->SetFileName(data_path.c_str());
    reader->SetImageIO(io);

    return IPT::ConvertImageFromIntegerFormat<TPixelType>(reader->GetOutput());
}

#include "itkExtractImageFilter.h"

void saveSlice(ImagePointer image, int d, int ind, std::string path)
{
    typedef itk::Image<double, ImageDimension - 1> SliceImageType;

    ImageType::RegionType slice = image->GetLargestPossibleRegion();
    slice.SetIndex(d, ind);
    slice.SetSize(d, 0);
    typedef itk::IPT<double, ImageDimension - 1> IPT;

    using ExtractFilterType = itk::ExtractImageFilter<ImageType, SliceImageType>;
    typename ExtractFilterType::Pointer extract = ExtractFilterType::New();
    extract->SetDirectionCollapseToIdentity();
    extract->InPlaceOn();
    extract->SetInput(image);
    extract->SetExtractionRegion(slice);

    typename SliceImageType::Pointer sliceImage = extract->GetOutput();
    IPT::SaveImage(path.c_str(), sliceImage, false);
}

TransformPointer CreateBSplineTransform(ImagePointer image, unsigned int numberOfGridNodes)
{
    TransformType::PhysicalDimensionsType fixedPhysicalDimensions;
    TransformType::MeshSizeType meshSize;

    TransformPointer transform = TransformType::New();

    for (unsigned int i = 0; i < ImageDimension; i++)
    {
        fixedPhysicalDimensions[i] = image->GetSpacing()[i] *
                                     static_cast<double>(
                                         image->GetLargestPossibleRegion().GetSize()[i] - 1);
    }
    meshSize.Fill(numberOfGridNodes - splineOrder);
    transform->SetTransformDomainOrigin(image->GetOrigin());
    transform->SetTransformDomainPhysicalDimensions(fixedPhysicalDimensions);
    transform->SetTransformDomainMeshSize(meshSize);
    transform->SetTransformDomainDirection(image->GetDirection());

    return transform;
}

void UpsampleBSplineTransform(ImagePointer image, TransformPointer newTransform, TransformPointer oldTransform, unsigned int numberOfGridNodes)
{
    typedef TransformType::ParametersType ParametersType;
    ParametersType parameters(newTransform->GetNumberOfParameters());
    parameters.Fill(0.0);

    unsigned int counter = 0;
    for (unsigned int k = 0; k < ImageDimension; k++)
    {
        using ParametersImageType = TransformType::ImageType;
        using ResamplerType = itk::ResampleImageFilter<ParametersImageType, ParametersImageType>;
        ResamplerType::Pointer upsampler = ResamplerType::New();
        using FunctionType = itk::BSplineResampleImageFunction<ParametersImageType, double>;
        FunctionType::Pointer function = FunctionType::New();
        using IdentityTransformType = itk::IdentityTransform<double, ImageDimension>;
        IdentityTransformType::Pointer identity = IdentityTransformType::New();
        upsampler->SetInput(oldTransform->GetCoefficientImages()[k]);
        upsampler->SetInterpolator(function);
        upsampler->SetTransform(identity);
        upsampler->SetSize(newTransform->GetCoefficientImages()[k]->GetLargestPossibleRegion().GetSize());
        upsampler->SetOutputSpacing(
            newTransform->GetCoefficientImages()[k]->GetSpacing());
        upsampler->SetOutputOrigin(
            newTransform->GetCoefficientImages()[k]->GetOrigin());
        upsampler->SetOutputDirection(image->GetDirection());
        using DecompositionType =
            itk::BSplineDecompositionImageFilter<ParametersImageType, ParametersImageType>;
        DecompositionType::Pointer decomposition = DecompositionType::New();
        decomposition->SetSplineOrder(splineOrder);
        decomposition->SetInput(upsampler->GetOutput());
        decomposition->Update();
        ParametersImageType::Pointer newCoefficients = decomposition->GetOutput();
        // copy the coefficients into the parameter array
        using Iterator = itk::ImageRegionIterator<ParametersImageType>;
        Iterator it(newCoefficients,
                    newTransform->GetCoefficientImages()[k]->GetLargestPossibleRegion());
        while (!it.IsAtEnd())
        {
            parameters[counter++] = it.Get();
            ++it;
        }
    }
    newTransform->SetParameters(parameters);
}

ImageType::Pointer ApplyTransform(ImagePointer refImage, ImagePointer floImage, TransformPointer transform)
{
    typedef itk::ResampleImageFilter<
        ImageType,
        ImageType>
        ResampleFilterType;

    typedef itk::IPT<double, ImageDimension> IPT;

    ResampleFilterType::Pointer resample = ResampleFilterType::New();

    resample->SetTransform(transform);
    resample->SetInput(floImage);

    resample->SetSize(refImage->GetLargestPossibleRegion().GetSize());
    resample->SetOutputOrigin(refImage->GetOrigin());
    resample->SetOutputSpacing(refImage->GetSpacing());
    resample->SetOutputDirection(refImage->GetDirection());
    resample->SetDefaultPixelValue(0.5);

    resample->UpdateLargestPossibleRegion();

    return resample->GetOutput();
}

double normalizeDerivative(unsigned int gridPoints, unsigned int dim)
{
    // / 5.0
    double frac = pow(gridPoints, (double)dim);
    return frac;
}

double maxDerivative(itk::Array<double> &array)
{
    double sum = 0.0;
    unsigned int count = array.GetSize();
    for (unsigned int i = 0; i < count; ++i)
    {
        double value = fabs(array[i]);
        if (value > sum)
            sum = value;
    }
    return sum;
}

double norm(itk::Array<double> &array, double p, double eps = 1e-7)
{
    double sum = 0.0;
    unsigned int count = array.GetSize();
    for (unsigned int i = 0; i < count; ++i)
    {
        double value = pow(fabs(array[i]), p);
        sum += value;
    }
    sum = pow(sum, 1.0 / p);
    if (sum < eps)
        sum = eps;
    return sum;
}

struct BSplineRegParam
{
    double learningRate1;
    double learningRate2;
    double lambdaFactor;
    int iterations;
    double samplingFraction;
    std::vector<int> controlPoints;
};

void register_func(typename ImageType::Pointer fixedImage, typename ImageType::Pointer movingImage, TransformPointer& transformForward, TransformPointer& transformInverse, BSplineRegParam param, ImagePointer mask)
{
    typedef itk::IPT<double, ImageDimension> IPT;
    MetricPointer metric = MetricType::New();

    metric->SetRandomSeed(1337);

    metric->SetFixedImage(fixedImage);
    metric->SetMovingImage(movingImage);

    metric->SetAlphaLevels(7);

    metric->SetForwardTransformPointer(transformForward);
    metric->SetInverseTransformPointer(transformInverse);

    metric->SetFixedSamplingPercentage(param.samplingFraction);
    metric->SetMovingSamplingPercentage(param.samplingFraction);

    if(mask) {
        IPT::BinaryImagePointer maskBin = IPT::ThresholdImage(mask, 0.01);

        metric->SetFixedMask(maskBin);
        metric->SetMovingMask(maskBin);
    }

    itk::TimeProbesCollectorBase chronometer;
    itk::MemoryProbesCollectorBase memorymeter;

    chronometer.Start("Pre-processing");
    memorymeter.Start("Pre-processing");

    metric->Update();

    chronometer.Stop("Pre-processing");
    memorymeter.Stop("Pre-processing");

    //chronometer.Report( std::cout );
    //memorymeter.Report( std::cout );

    typedef typename MetricType::MeasureType MeasureType;
    typedef typename MetricType::DerivativeType DerivativeType;

    MeasureType value;
    DerivativeType derivative(metric->GetNumberOfParameters());
    DerivativeType derAcc(metric->GetNumberOfParameters());

    derAcc.fill(0.0);

    typedef itk::IPT<double, ImageDimension> IPT;

    const double gt_percentage = 0.01;

    metric->SetSymmetryLambda(param.lambdaFactor);
    metric->SetFixedSamplingPercentage(gt_percentage);
    metric->SetMovingSamplingPercentage(gt_percentage);
    metric->GetValueAndDerivative(value, derivative);
    
    metric->SetFixedSamplingPercentage(param.samplingFraction);
    metric->SetMovingSamplingPercentage(param.samplingFraction);
    metric->SetSymmetryLambda(param.lambdaFactor);
    double p = 2.0;
    double maxGrad = 0.0;
    double momentum = 0.05;
    double maxMomentum = 0.0;
    double meanValue = value;

    chronometer.Start("Registration");
    memorymeter.Start("Registration");

    for (int q = 0; q < param.controlPoints.size(); ++q) {
        if(q > 0) {
            TransformPointer tforNew = CreateBSplineTransform(fixedImage, param.controlPoints[q]);
            TransformPointer tinvNew = CreateBSplineTransform(movingImage, param.controlPoints[q]);
            int curNumberOfGridNodes = param.controlPoints[q];
            UpsampleBSplineTransform(fixedImage, tforNew, transformForward, curNumberOfGridNodes);
            UpsampleBSplineTransform(movingImage, tinvNew, transformInverse, curNumberOfGridNodes);
            transformForward = tforNew;
            transformInverse = tinvNew;

            metric->SetForwardTransformPointer(transformForward);
            metric->SetInverseTransformPointer(transformInverse);
            metric->UpdateAfterTransformChange();
            derivative = DerivativeType(metric->GetNumberOfParameters());
            derAcc = DerivativeType(metric->GetNumberOfParameters());
            derAcc.fill(0.0);
        }
    std::cout << "Initial loss: " << meanValue << std::endl;

    for (int i = 0; i < param.iterations; ++i)
    {
        double alpha = (double)i / param.iterations;
        double learningRate = param.learningRate1 * (1.0 - alpha) + param.learningRate2 * alpha;
        metric->GetValueAndDerivative(value, derivative);
        for (unsigned int j = 0; j < metric->GetNumberOfParameters(); ++j) {
            derivative[j] = derivative[j];// * metric->GetNumberOfParameters();
        }

        //if (i == 0)
            //meanValue = value;
        //else
        //meanValue = 0.95 * meanValue + 0.05 * value;
        meanValue = value;

        for (unsigned int j = 0; j < metric->GetNumberOfParameters(); ++j)
        {
            derivative[j] = derAcc[j] * (momentum) + derivative[j] * (1.0 - momentum);
            derAcc[j] = derivative[j];
        }
        //norm(derivative, p)
        maxGrad = (1.0 - maxMomentum) * maxDerivative(derivative) + maxMomentum * maxGrad;
        double curLR = learningRate;// / maxDerivative(derivative); //normalizeDerivative(param.controlPoints, ImageDimension);

        metric->UpdateTransformParameters(derivative, curLR);

        //if (i % 5 == 0 || (i + 1) == param.iterations)
        {
            std::cout << "Iteration " << (i + 1) << "... Value: " << meanValue << ", Derivative: " << maxGrad << ", lr: " << curLR << std::endl;
            //std::cout << metric->GetParameters() << std::endl;
            //std::cout << "Derivative: " << derivative << std::endl;
        }
    }

    MetricType::ParametersType parameters(metric->GetParameters());
    double absVal = 0.0;
    double val = 0.0;
    for(unsigned int j = 0; j < metric->GetNumberOfParameters(); ++j) {
        if(fabs(parameters[j]) > absVal) {
            absVal = fabs(parameters[j]);
            val = parameters[j];
        }
    }
    std::cout << "Largest parameters: " << absVal << std::endl;

    }

    chronometer.Stop("Registration");
    memorymeter.Stop("Registration");

    chronometer.Report(std::cout);
    memorymeter.Report(std::cout);
/*
    metric->SetSymmetryLambda(1.0);
    */
    metric->SetFixedSamplingPercentage(gt_percentage);
    metric->SetMovingSamplingPercentage(gt_percentage);
    metric->GetValueAndDerivative(value, derivative);

    std::cout << "Final Loss: " << value << std::endl;
}

void print_difference_image_stats(ImagePointer image1, ImagePointer image2, const char* name) {
    typedef itk::IPT<double, ImageDimension> IPT;
    ImageType::Pointer diff = IPT::DifferenceImage(image1, image2);

    IPT::ImageStatisticsData movingStats = IPT::ImageStatistics(diff);

    std::cout << name << " mean: " << movingStats.mean << ", std: " << movingStats.sigma << std::endl;
}

// Parameters ref_image.png flo_image.png learning_rate1 learning_rate2 symmetry_factor iterations
int main(int argc, char **argv)
{
    if (argc < 10)
    {
        std::cout << "ACTestBSpline format.txt ref_image.png flo_image.png outname learning_rate symmetry_factor iterations sampling_fraction control_point_count" << std::endl;
        return -1;
    }
    BSplineRegParam param;
    param.learningRate1 = atof(argv[4]);
    param.learningRate2 = atof(argv[5]);
    param.lambdaFactor = atof(argv[6]);
    param.iterations = atoi(argv[7]);
    param.samplingFraction = atof(argv[8]);
    param.controlPoints.push_back(atoi(argv[9]));
    const char *in_extra = (argc >= 11) ? argv[10] : 0;

    typedef itk::IPT<double, ImageDimension> IPT;

    typedef double CoordinateRepType;

    std::string out_name = argv[3];

    ImageType::Pointer fixedImage = readRawIntegerFile<unsigned short, ImageDimension>(argv[1]);
    ImageType::Pointer movingImage = readRawIntegerFile<unsigned short, ImageDimension>(argv[2]);

    IPT::SaturateImage(movingImage, 0.0, 1.0);
    IPT::SaveImageU16("./test.nii.gz", movingImage);

    
    ImageType::Pointer mask = readRawIntegerFile<unsigned char, ImageDimension>("./mask.txt");

    IPT::BinaryImagePointer maskBin = IPT::ThresholdImage(mask, 0.01);
    maskBin = DilateMask(maskBin, 10);

    ImagePointer maskUpd = itk::ConvertImageFromIntegerFormat<bool, ImageDimension>(maskBin);

    ImagePointer fixedImageOrig = fixedImage;
    ImagePointer movingImageOrig = movingImage;

    print_difference_image_stats(fixedImage, movingImage, "Initial difference");

    // Convert images to gradient magnitude representation

    fixedImage = IPT::NormalizeImage(fixedImage, IPT::IntensityMinMax(fixedImage, 0.01, maskBin));
    movingImage = IPT::NormalizeImage(movingImage, IPT::IntensityMinMax(movingImage, 0.01, maskBin));

    bool enable_gradient_magnitude = true;
    if(enable_gradient_magnitude) {
        double gradSigma = 2.0;
        fixedImage = GradientMagnitudeImage(fixedImage, gradSigma);
        movingImage = GradientMagnitudeImage(movingImage, gradSigma);
        fixedImage = IPT::NormalizeImage(fixedImage, IPT::IntensityMinMax(fixedImage, 0.01, maskBin));
        movingImage = IPT::NormalizeImage(movingImage, IPT::IntensityMinMax(movingImage, 0.01, maskBin));
    }

    // Create transforms

    unsigned int numberOfGridNodes = param.controlPoints[0];
    TransformPointer transformForward = CreateBSplineTransform(fixedImage, numberOfGridNodes);
    TransformPointer transformInverse = CreateBSplineTransform(movingImage, numberOfGridNodes);

    typedef itk::IPT<double, ImageDimension> IPT;

    IPT::SaveImageU8("fixed.nii.gz", fixedImage);
    IPT::SaveImageU8("moving.nii.gz", movingImage);

    // optimize

    //int levels = 4;
    //double sigma[] = {3.0, 0.0, 0.0, 0.0};
    //int subsamplingFactor[] = {2, 2, 1, 1};
    //unsigned int levelNumberOfGridNodes[] = {numberOfGridNodes, (unsigned int)(numberOfGridNodes * 2), numberOfGridNodes * 3, numberOfGridNodes * 4};
    int levels = 1;
    double sigma[] = {0.0, 0.0};
    int subsamplingFactor[] = {1, 2};
    unsigned int levelNumberOfGridNodes[] = {numberOfGridNodes, (unsigned int)(numberOfGridNodes * 2)};

    double normalizationPercentage = 0.01;
    unsigned int curNumberOfGridNodes = numberOfGridNodes;
    ImageType::Pointer movingTransformed;
    ImageType::Pointer fixedTransformed;

    for (unsigned int i = 0; i < levels; ++i)
    {
        ImagePointer fixedImagePrime = IPT::SmoothImage(fixedImage, sigma[i]);
        ImagePointer movingImagePrime = IPT::SmoothImage(movingImage, sigma[i]);
        fixedImagePrime = IPT::SubsampleImage(fixedImagePrime, subsamplingFactor[i]);
        movingImagePrime = IPT::SubsampleImage(movingImagePrime, subsamplingFactor[i]);
        ImagePointer maskPrime = IPT::SubsampleImage(maskUpd, subsamplingFactor[i]);
        fixedImagePrime = IPT::NormalizeImage(fixedImagePrime, IPT::IntensityMinMax(fixedImagePrime, normalizationPercentage));
        movingImagePrime = IPT::NormalizeImage(movingImagePrime, IPT::IntensityMinMax(movingImagePrime, normalizationPercentage));
        if (levelNumberOfGridNodes[i] != curNumberOfGridNodes)
        {
            TransformPointer tforNew = CreateBSplineTransform(fixedImage, levelNumberOfGridNodes[i]);
            TransformPointer tinvNew = CreateBSplineTransform(movingImage, levelNumberOfGridNodes[i]);
            curNumberOfGridNodes = levelNumberOfGridNodes[i];
            UpsampleBSplineTransform(fixedImage, tforNew, transformForward, curNumberOfGridNodes);
            UpsampleBSplineTransform(movingImage, tinvNew, transformInverse, curNumberOfGridNodes);
            transformForward = tforNew;
            transformInverse = tinvNew;
        }

        param.controlPoints.clear();
        param.controlPoints.push_back(curNumberOfGridNodes);
        param.controlPoints.push_back(curNumberOfGridNodes*2);
        param.controlPoints.push_back(curNumberOfGridNodes*3);
        //param.controlPoints.push_back(curNumberOfGridNodes*4);

        register_func(fixedImagePrime, movingImagePrime, transformForward, transformInverse, param, maskPrime);
        movingTransformed = ApplyTransform(fixedImage, movingImage, transformForward);
        fixedTransformed = ApplyTransform(movingImage, fixedImage, transformInverse);

        char buf[512];
        sprintf(buf, "moving_transformed_to_fixed_%d.png", i + 1);
        IPT::SaveImageU8(buf, movingTransformed);
        sprintf(buf, "fixed_transformed_to_moving_%d.png", i + 1);
        IPT::SaveImageU8(buf, fixedTransformed);
    }

    movingTransformed = ApplyTransform(fixedImageOrig, movingImageOrig, transformForward);
    fixedTransformed = ApplyTransform(movingImageOrig, fixedImageOrig, transformInverse);

    IPT::SaturateImage(movingTransformed, 0.0, 1.0);
    IPT::SaturateImage(fixedTransformed, 0.0, 1.0);
    
    DisplacementFieldImagePointer dfield = TransformToDisplacementField<TransformType>(transformForward, fixedImageOrig);

    std::string dfield_file = out_name + "_dfield.nii.gz";
    SaveDisplacementField(dfield, dfield_file);

    ImagePointer jacob = JacobianDeterminantFilter(dfield);
    
    std::string jacob_file = out_name + "_jac.nii.gz";
    SaveJacobianDeterminantImage(jacob, jacob_file);
    
    std::string registered_file = out_name + "_registered.nii.gz";
    IPT::SaveImageU16(registered_file.c_str(), movingTransformed);
    //IPT::SaveImageU16("fixed_final.nii.gz", fixedTransformed);

    print_difference_image_stats(fixedImageOrig, movingTransformed, "Moving difference");
    print_difference_image_stats(movingImageOrig, fixedTransformed, "Fixed difference");

    ImageType::Pointer movingDiff = IPT::DifferenceImage(movingTransformed, fixedImage);
    ImageType::Pointer fixedDiff = IPT::DifferenceImage(fixedTransformed, movingImage);

    std::cout << "Saving diff images." << std::endl;

    std::string diff_file = out_name + "_diff.nii.gz";
    IPT::SaveImageU8(diff_file.c_str(), movingDiff);
    //IPT::SaveImageU8("fixed_diff.nii.gz", fixedDiff);

    if (in_extra)
    {
        ImageType::Pointer imExtra = IPT::LoadImage(in_extra);
        ImageType::Pointer imExtraTransformed = ApplyTransform(fixedImage, imExtra, transformForward);
        IPT::SaveImageU8("extra.png", imExtraTransformed);
    }

    return 0;
}
